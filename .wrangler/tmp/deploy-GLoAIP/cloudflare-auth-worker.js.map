{
  "version": 3,
  "sources": ["../../../cloudflare-auth-worker.js"],
  "sourceRoot": "C:\\Users\\tejas\\AndroidStudioProjects\\cfdptest\\.wrangler\\tmp\\deploy-GLoAIP",
  "sourcesContent": ["// Cloudflare Worker - Enhanced auth handler with KV\r\naddEventListener('fetch', event => {\r\n  event.respondWith(handleRequest(event.request))\r\n})\r\n\r\nasync function handleRequest(request) {\r\n  const { pathname } = new URL(request.url)\r\n  const corsHeaders = {\r\n    'Access-Control-Allow-Origin': '*',\r\n    'Access-Control-Allow-Methods': 'POST, OPTIONS',\r\n    'Access-Control-Allow-Headers': 'Content-Type'\r\n  }\r\n\r\n  // Handle CORS preflight\r\n  if (request.method === 'OPTIONS') {\r\n    return new Response(null, { headers: corsHeaders })\r\n  }\r\n\r\n  // Route requests\r\n  switch(pathname) {\r\n    case '/auth/signup':\r\n      return handleSignup(request, corsHeaders)\r\n    case '/auth/login':\r\n      return handleLogin(request, corsHeaders)\r\n    default:\r\n      return new Response('Not Found', { status: 404 })\r\n  }\r\n}\r\n\r\nasync function handleSignup(request, headers) {\r\n  try {\r\n    const { email, password, userId, username } = await request.json()\r\n\r\n    // Validate input\r\n    if (!email || !password || !username) {\r\n      return new Response(JSON.stringify({ error: 'Missing required fields' }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json', ...headers }\r\n      })\r\n    }\r\n\r\n    // Check if user exists\r\n    const existingUser = await AUTH_STORE.get(email)\r\n    if (existingUser) {\r\n      return new Response(JSON.stringify({ error: 'User already exists' }), {\r\n        status: 409,\r\n        headers: { 'Content-Type': 'application/json', ...headers }\r\n      })\r\n    }\r\n\r\n    // Store user\r\n    await AUTH_STORE.put(email, JSON.stringify({\r\n      userId,\r\n      email,\r\n      password,\r\n      username\r\n    }))\r\n\r\n    return new Response(JSON.stringify({\r\n      userId,\r\n      username,\r\n      message: 'Account created successfully'\r\n    }), {\r\n      status: 201,\r\n      headers: { 'Content-Type': 'application/json', ...headers }\r\n    })\r\n  } catch (err) {\r\n    return new Response(JSON.stringify({ error: err.message }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json', ...headers }\r\n    })\r\n  }\r\n}\r\n\r\nasync function handleLogin(request, headers) {\r\n  try {\r\n    const { email, password } = await request.json()\r\n\r\n    // Validate input\r\n    if (!email || !password) {\r\n      return new Response(JSON.stringify({ error: 'Missing email or password' }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json', ...headers }\r\n      })\r\n    }\r\n\r\n    const userData = await AUTH_STORE.get(email)\r\n\r\n    if (!userData) {\r\n      return new Response(JSON.stringify({ error: 'User not found' }), {\r\n        status: 404,\r\n        headers: { 'Content-Type': 'application/json', ...headers }\r\n      })\r\n    }\r\n\r\n    const user = JSON.parse(userData)\r\n    if (user.password !== password) {\r\n      return new Response(JSON.stringify({ error: 'Invalid credentials' }), {\r\n        status: 401,\r\n        headers: { 'Content-Type': 'application/json', ...headers }\r\n      })\r\n    }\r\n\r\n    return new Response(JSON.stringify({\r\n      userId: user.userId,\r\n      email: user.email,\r\n      username: user.username\r\n    }), {\r\n      headers: { 'Content-Type': 'application/json', ...headers }\r\n    })\r\n  } catch (err) {\r\n    return new Response(JSON.stringify({ error: err.message }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json', ...headers }\r\n    })\r\n  }\r\n}"],
  "mappings": "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",
  "names": []
}
